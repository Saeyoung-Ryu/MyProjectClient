@page "/MatchHistory"
@using BlazorApp3.Common.Type
@using Enum
@using BlazorApp3.Common.Manager
@using BlazorApp3.Protocol

<PageTitle>내전 전적</PageTitle>
<DisplayPage/>
<div class="wrapper">
    <div class="home-container">
<br><br><br>

@if (isLoading)
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}
else
{
    @if (logMatchHistoryList.Count > 0)
    {
        <div style="display: flex; flex-direction: column; align-items: center;">
            <img src="matchHistoryImage.jpg" alt="Example Image" style="width: 330px; height: 170px;" />
            <div style="text-align: center;">
                <div id="container" class style="width: 100%; height: 700px; overflow: auto; margin-top: 10px">
                    <table id="Border-Solid" style="display: inline-block; margin-right: 20px;" class="table ta2le-border table-hover w-auto">
                        <thead style="position: sticky; top: 0; background-color: #f5f5f5;">
                        <tr class="table-primary">
                            <th>날짜</th>
                            <th>1팀</th>
                            <th>2팀</th>
                            <th>승리팀</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var logMatchHistory in logMatchHistoryList)
                        {
                            <tr>
                                <td>@logMatchHistory.Time.ToString("yyyy-MM-dd")</td>
                                <td>@logMatchHistory.Team1Data</td>
                                <td>@logMatchHistory.Team2Data</td>

                                @if (logMatchHistory.Team1Win > 0)
                                {
                                    <td>1</td>
                                }
                                else if (logMatchHistory.Team2Win > 0)
                                {
                                    <td>2</td>
                                }
                                else
                                {
                                    <td><button type="submit" class="btn btn-success" disabled="@(!canClick)" @onclick="@(e => Team1WinBtnAsync(logMatchHistory))">1팀 승</button><button type="submit" class="btn btn-info" disabled="@(!canClick)" @onclick="@(e => Team2WinBtnAsync(logMatchHistory))">2팀 승</button></td>
                                }
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <br><br>
    }
    else
    {
        <p3>No Match History Data</p3>
    }
}
	</div>
</div>

<Footer></Footer>

@code
{
    List<LogMatchHistory> logMatchHistoryList = new List<LogMatchHistory>();
    bool canClick = true;
    bool isLoading = false;
    
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var matchHistoryRes = await MatchHistoryManager.GetMatchHistoryAsync();
        logMatchHistoryList = matchHistoryRes.LogMatchHistoryList.OrderByDescending(e => e.Time).ToList();
        isLoading = false;
    }
    
    private async Task Team1WinBtnAsync(LogMatchHistory logMatchHistory)
    {
        canClick = false;
        
        logMatchHistory.Team1Win = 1;
        await MatchHistoryManager.SetTeamWinAsync(logMatchHistory);
        
        canClick = true;
    }

    private async Task Team2WinBtnAsync(LogMatchHistory logMatchHistory)
    {
        canClick = false;
        
        logMatchHistory.Team2Win = 1;
        await MatchHistoryManager.SetTeamWinAsync(logMatchHistory);
        
        canClick = true;
    }
}

@inject IMatToaster Toaster

@code{
    private long firstDummyClubSeq = 0;
    private long lastDummyClubSeq = 0;
    
    private string title = "";
    private string message = "";
    private bool showProgressBar;
    private bool showCloseButton;
    private bool actionOnClick;
    private string maximumOpacity;

    private string showTransitionDuration;
    private string visibleStateDuration;
    private string hideTransitionDuration;

    private bool requireInteraction;

    protected override void OnInitialized()
    {
        showProgressBar = Toaster.Configuration.ShowProgressBar;
        showCloseButton = Toaster.Configuration.ShowCloseButton;
        maximumOpacity = Toaster.Configuration.MaximumOpacity.ToString();

        showTransitionDuration = Toaster.Configuration.ShowTransitionDuration.ToString();
        visibleStateDuration = Toaster.Configuration.VisibleStateDuration.ToString();
        hideTransitionDuration = Toaster.Configuration.HideTransitionDuration.ToString();

        requireInteraction = Toaster.Configuration.RequireInteraction;
    }

    public void Show(MatToastType type, string icon, string message)
    {
        Toaster.Add(message, type, title, icon, config =>
        {
            config.ShowCloseButton = showCloseButton;
            config.ShowProgressBar = showProgressBar;
            config.MaximumOpacity = Convert.ToInt32(maximumOpacity);

            config.ShowTransitionDuration = Convert.ToInt32(showTransitionDuration);
            config.VisibleStateDuration = Convert.ToInt32(visibleStateDuration);
            config.HideTransitionDuration = Convert.ToInt32(hideTransitionDuration);

            config.RequireInteraction = requireInteraction;
        });
    }

    private void ShowUpdateSuccess()
    {
        Show(MatToastType.Info, "check_circle", $"Updated Successfully");
    }

    private void ShowError(string errorMessage)
    {
        Show(MatToastType.Warning, "error", $"{errorMessage}");
    }
}
