@page "/MatchHistory"
@using BlazorApp3.Common.Type
@using Enum
@using BlazorApp3.Common.Manager
@using BlazorApp3.Protocol

<PageTitle>내전 전적</PageTitle>
<DisplayPage/>

<br><br><br>

@if (isLoading)
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}
else
{
    @if (logMatchHistoryList.Count > 0)
    {
        <div style="text-align: center;">
        <div id="container" class style="width: 1200px; height: 700px; overflow: auto; margin-top: 10px">
            <table id="Border-Solid" style="display: inline-block; margin-right: 20px;" class="table ta2le-border table-hover w-auto">
                <thead style="position: sticky; top: 0; background-color: #f5f5f5;">
                <tr class="table-primary">
                    <th>날짜</th>
                    <th>1팀</th>
                    <th>2팀</th>
                    <th>승리팀</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var logMatchHistory in logMatchHistoryList)
                {
                    <tr>
                        <td>@logMatchHistory.Time.ToString("yyyy-MM-dd")</td>
                        <td>@logMatchHistory.Team1Data</td>
                        <td>@logMatchHistory.Team2Data</td>

                        @if (logMatchHistory.Team1Win > 0)
                        {
                            <td>1</td>
                        }
                        else if (logMatchHistory.Team2Win > 0)
                        {
                            <td>2</td>
                        }
                        else
                        {
                            <td><button type="submit" class="btn btn-success" disabled="@(!canClick)" @onclick="@(e => Team1WinBtnAsync(logMatchHistory))">1팀 승</button><button type="submit" class="btn btn-info" disabled="@(!canClick)" @onclick="@(e => Team2WinBtnAsync(logMatchHistory))">2팀 승</button></td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
        </div>
    }
    else
    {
        <p3>No Match History Data</p3>
    }
}


@code
{
    List<LogMatchHistory> logMatchHistoryList = new List<LogMatchHistory>();
    bool canClick = true;
    bool isLoading = false;
    
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        using (var client = new HttpClient())
        {
            GetMatchHistoryReq getMatchHistoryReq = new GetMatchHistoryReq();
            
            client.BaseAddress = new Uri(MyProjectInfoConfig.Instance.ServerAddress);
            var response = await client.PostAsJsonAsync("/api/GetMatchHistory", getMatchHistoryReq);
            Console.WriteLine("Protocol : GetMatchHistory");
            var getMatchHistoryRes = await response.Content.ReadFromJsonAsync<GetMatchHistoryRes>();
            logMatchHistoryList = getMatchHistoryRes.LogMatchHistoryList.OrderByDescending(e => e.Time).ToList();
        }
        isLoading = false;
    }
    
    private async Task Team1WinBtnAsync(LogMatchHistory logMatchHistory)
    {
        canClick = false;
        
        logMatchHistory.Team1Win = 1;
        using (var client = new HttpClient())
        {
            SetTeamWinReq setTeamWinReq = new SetTeamWinReq()
            {
                LogMatchHistory = logMatchHistory,
                WinTeam = 1
            };
            
            client.BaseAddress = new Uri(MyProjectInfoConfig.Instance.ServerAddress);
            var response = await client.PostAsJsonAsync("/api/SetTeamWin", setTeamWinReq);
            Console.WriteLine("Protocol : SetTeamWin");
        }
        canClick = true;
    }

    private async Task Team2WinBtnAsync(LogMatchHistory logMatchHistory)
    {
        canClick = false;
        
        logMatchHistory.Team2Win = 1;
        using (var client = new HttpClient())
        {
            SetTeamWinReq setTeamWinReq = new SetTeamWinReq()
            {
                LogMatchHistory = logMatchHistory,
                WinTeam = 2
            };
            
            client.BaseAddress = new Uri(MyProjectInfoConfig.Instance.ServerAddress);
            var response = await client.PostAsJsonAsync("/api/SetTeamWin", setTeamWinReq);
            Console.WriteLine("Protocol : SetTeamWin");
        }
        canClick = true;
    }

    private async Task ResetRankAsync()
    {
        isLoading = true;
        /*await RankManager.SetOverallRankInfoListAsync();
        await RankManager.SetOtherLaneRanks();*/
        isLoading = false;
    }
}
