@page "/DashBoardPage/{dashBoardName}"
@using Protocol.Type
@inject NavigationManager Navigation
@inject Player Player
@inject IMatToaster Toaster

<PageTitle>DashBoard</PageTitle>

<br>
<div class="text-center">
    <h1 class="bold-shadow">@DashBoardName</h1>
    <br>

<div class="input-group mt-3 justify-content-center">
    <MatTabGroup @bind-ActiceIndex="@tabIndex" Style="width: 1500px; color: #198754">
        
        <MatTab Label="About">
            <br><br><br><br>
            <table class="table small-table">
                <thead>
                <tr>
                    <th scope="col">대시보드</th>
                    <th scope="col">방장</th>
                    <th scope="col">점수</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>bbbb</td>
                    <td>cccc</td>
                    <td>dddd</td>
                </tr>
                <tr>
                    <td>bbbb</td>
                    <td>cccc</td>
                    <td>dddd</td>
                </tr>
                <tr>
                    <td>bbbb</td>
                    <td>cccc</td>
                    <td>dddd</td>
                </tr>
                <tr>
                    <td>aaaa</td>
                    <td>cccc</td>
                    <td>dddd</td>
                </tr>
                </tbody>
            </table>
        </MatTab>

        <MatTab Label="Ranking">

        </MatTab>

        <MatTab Label="팀 나누기">

        </MatTab>

        <MatTab Label="전적">

        </MatTab>

    </MatTabGroup>
</div>

</div>
 
 
@code {
    private string _title = "Test Title";
            private string _message = "Test Message";
            private bool _showProgressBar;
            private bool _showCloseButton;
            private bool _actionOnClick;
            private string _maximumOpacity;
 
            private string _showTransitionDuration;
            private string _visibleStateDuration;
            private string _hideTransitionDuration;
 
            private bool _requireInteraction;
 
            public string _maxDisplayedToasts
            {
                get { return Toaster.Configuration.MaxDisplayedToasts.ToString(); }
                set { Toaster.Configuration.MaxDisplayedToasts = Convert.ToInt32(value); }
            }
 
 
            private string _toastPosition
            {
                get { return Toaster.Configuration.Position.ToString(); }
                set { Toaster.Configuration.Position = (MatToastPosition)Enum.Parse(typeof(MatToastPosition), value); }
            }
 
            public void Show(MatToastType type, string icon = "")
            {
                Toaster.Add(_message, type, _title, icon, config =>
                {
                    config.ShowCloseButton = _showCloseButton;
                    config.ShowProgressBar = _showProgressBar;
                    config.MaximumOpacity = Convert.ToInt32(_maximumOpacity);
 
                    config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
                    config.VisibleStateDuration = Convert.ToInt32(_visibleStateDuration);
                    config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);
 
                    config.RequireInteraction = _requireInteraction;
 
                    if (_actionOnClick)
                    {
                        config.Onclick = toast =>
                        {
                            Console.WriteLine($"Title: \"{toast.Title}\"; message: \"{toast.Message}\"; Type: {toast.Options.Type}");
                            return Task.CompletedTask;
                        };
                    }
                });
            }
        }
