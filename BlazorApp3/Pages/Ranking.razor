@page "/Ranking"
@using BlazorApp3.Common.Type
@using Enum
@using BlazorApp3.Common.Manager

<PageTitle>랭킹</PageTitle>

@if (isLoading)
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}
else
{
    <br>
    <br>
    <MatTabGroup @bind-ActiceIndex="@tabIndex" Style="width: 900px; color: #198754">
        
        <MatTab Label="전체">
            <br><br>
            <table id="Border-Solid" class="table table-border table-hover w-auto">
                <thead>
                <tr class="table-primary">
                    <th>랭킹</th>
                    <th>닉네임</th>
                    <th>승리</th>
                    <th>패배</th>
                    <th>승률</th>
                </tr>
                </thead>
                <tbody>
                @for (int i = 0; i < totalRankList.Count; i++)
                {
                    <tr>
                        <td>@(i + 1)</td>
                        <td>@totalRankList[i].NickName</td>
                        <td>@totalRankList[i].WinCount</td>
                        <td>@totalRankList[i].LoseCount</td>
                        <td>@totalRankList[i].WinRate%</td>
                    </tr>
                }
                </tbody>
            </table>
        </MatTab>

        <MatTab Label="탑">
            <br><br>
            <table id="Border-Solid" class="table table-border table-hover w-auto">
                <thead>
                <tr class="table-primary">
                    <th>랭킹</th>
                    <th>닉네임</th>
                    <th>승리</th>
                    <th>패배</th>
                    <th>승률</th>
                </tr>
                </thead>
                <tbody>
                @foreach(var item in topRankList)
                {
                    <tr>
                        <td>@item.Rank</td>
                        <td>@item.NickName</td>
                        <td>@item.WinCount</td>
                        <td>@item.LoseCount</td>
                        <td>@item.WinRate%</td>
                    </tr>
                }
                </tbody>
            </table>
        </MatTab>

        <MatTab Label="정글">
            <br><br>
            <table id="Border-Solid" class="table table-border table-hover w-auto">
                <thead>
                <tr class="table-primary">
                    <th>랭킹</th>
                    <th>닉네임</th>
                    <th>승리</th>
                    <th>패배</th>
                    <th>승률</th>
                </tr>
                </thead>
                <tbody>
                @foreach(var item in jgRankList)
                {
                    <tr>
                        <td>@item.Rank</td>
                        <td>@item.NickName</td>
                        <td>@item.WinCount</td>
                        <td>@item.LoseCount</td>
                        <td>@item.WinRate%</td>
                    </tr>
                }
                </tbody>
            </table>
        </MatTab>
        
        <MatTab Label="미드">
            <br><br>
            <table id="Border-Solid" class="table table-border table-hover w-auto">
                <thead>
                <tr class="table-primary">
                    <th>랭킹</th>
                    <th>닉네임</th>
                    <th>승리</th>
                    <th>패배</th>
                    <th>승률</th>
                </tr>
                </thead>
                <tbody>
                @foreach(var item in midRankList)
                {
                    <tr>
                        <td>@item.Rank</td>
                        <td>@item.NickName</td>
                        <td>@item.WinCount</td>
                        <td>@item.LoseCount</td>
                        <td>@item.WinRate%</td>
                    </tr>
                }
                </tbody>
            </table>
        </MatTab>
        
        <MatTab Label="원딜">
            <br><br>
            <table id="Border-Solid" class="table table-border table-hover w-auto">
                <thead>
                <tr class="table-primary">
                    <th>랭킹</th>
                    <th>닉네임</th>
                    <th>승리</th>
                    <th>패배</th>
                    <th>승률</th>
                </tr>
                </thead>
                <tbody>
                @foreach(var item in adcRankList)
                {
                    <tr>
                        <td>@item.Rank</td>
                        <td>@item.NickName</td>
                        <td>@item.WinCount</td>
                        <td>@item.LoseCount</td>
                        <td>@item.WinRate%</td>
                    </tr>
                }
                </tbody>
            </table>
        </MatTab>
        
        <MatTab Label="서폿">
            <br><br>
            <table id="Border-Solid" class="table table-border table-hover w-auto">
                <thead>
                <tr class="table-primary">
                    <th>랭킹</th>
                    <th>닉네임</th>
                    <th>승리</th>
                    <th>패배</th>
                    <th>승률</th>
                </tr>
                </thead>
                <tbody>
                @foreach(var item in supRankList)
                {
                    <tr>
                        <td>@item.Rank</td>
                        <td>@item.NickName</td>
                        <td>@item.WinCount</td>
                        <td>@item.LoseCount</td>
                        <td>@item.WinRate%</td>
                    </tr>
                }
                </tbody>
            </table>
        </MatTab>

    </MatTabGroup>
}

@code
{
    private bool isLoading = false;
    
    List<RankInfo> totalRankList = new List<RankInfo>();
    List<RankInfo> adcRankList = new List<RankInfo>();
    List<RankInfo> supRankList = new List<RankInfo>();
    List<RankInfo> midRankList = new List<RankInfo>();
    List<RankInfo> jgRankList = new List<RankInfo>();
    List<RankInfo> topRankList = new List<RankInfo>();

    class RankInfo
    {
        public int Rank { get; set; }
        public string NickName { get; set; }
        public int Seq { get; set; }
        public int WinCount { get; set; }
        public int LoseCount { get; set; }
        public double WinRate { get; set; }
        public int OverallScore { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await SetOverallRankInfoListAsync();
        await SetOtherLaneRanks();
        isLoading = false;
    }

    private async Task SetOverallRankInfoListAsync()
    {
        var infos = await AccountDB.GetAllUserWinRateHistory();

        List<List<UserWinRateHistory>> groupedInfo = infos
            .GroupBy(info => info.UserSeq)
            .Select(group => group.ToList())
            .ToList();

        int rankOrder = 1;
        
        foreach (var grouped in groupedInfo)
        {
            RankInfo rankInfo = new RankInfo();
            rankInfo.NickName = String.Empty;
            rankInfo.Rank = rankOrder;

            foreach (var item in grouped)
            {
                if (rankInfo.NickName == String.Empty)
                {
                    rankInfo.NickName = await item.GetNickNameAsync();
                    if (rankInfo.NickName == String.Empty)
                        break;
                }
                
                rankInfo.Seq = item.UserSeq;
                rankInfo.WinCount += item.WinCount;
                rankInfo.LoseCount += item.LoseCount;
                rankOrder++;
            }

            if(rankInfo.NickName == String.Empty)
                continue;

            if (rankInfo.WinCount + rankInfo.LoseCount != 0)
            {
                double value = (double) rankInfo.WinCount / (rankInfo.WinCount + rankInfo.LoseCount) * 100;
                rankInfo.WinRate  = Math.Round(value, 1);
                rankInfo.OverallScore = rankInfo.WinCount * 12 - rankInfo.LoseCount * 10;
                totalRankList.Add(rankInfo);
            }
        }

        totalRankList = totalRankList.OrderByDescending(e => e.OverallScore).ToList();
    }

    private async Task SetOtherLaneRanks()
    {
        var supList = (await AccountDB.GetAllUserWinRateHistoryByLine(LineType.Support)).OrderByDescending(e => e.GetOverAllScore()).ToList();
        var adcList = (await AccountDB.GetAllUserWinRateHistoryByLine(LineType.Adc)).OrderByDescending(e => e.GetOverAllScore()).ToList();
        var midList = (await AccountDB.GetAllUserWinRateHistoryByLine(LineType.Mid)).OrderByDescending(e => e.GetOverAllScore()).ToList();
        var jgList = (await AccountDB.GetAllUserWinRateHistoryByLine(LineType.Jungle)).OrderByDescending(e => e.GetOverAllScore()).ToList();
        var topList = (await AccountDB.GetAllUserWinRateHistoryByLine(LineType.Top)).OrderByDescending(e => e.GetOverAllScore()).ToList();

        supRankList = await SetListAsync(supList);
        adcRankList = await SetListAsync(adcList);
        midRankList = await SetListAsync(midList);
        jgRankList = await SetListAsync(jgList);
        topRankList = await SetListAsync(topList);
    }

    private async Task<List<RankInfo>> SetListAsync(List<UserWinRateHistory> userWinRateList)
    {
        List<RankInfo> list = new List<RankInfo>();

        int rankOrder = 1;
        
        foreach (var sup in userWinRateList)
        {
            RankInfo rankInfo = new RankInfo();

            rankInfo.NickName = await sup.GetNickNameAsync();
            if(rankInfo.NickName == String.Empty)
                continue;

            rankInfo.Rank = rankOrder;
            rankInfo.WinCount = sup.WinCount;
            rankInfo.LoseCount = sup.LoseCount;
            rankInfo.OverallScore = sup.GetOverAllScore();
            rankInfo.WinRate = sup.GetWinRate();
            
            if(rankInfo.WinRate < 0)
                continue;
            
            list.Add(rankInfo);
            rankOrder++;
        }

        return list;
    }
}

@code
{
    private int tabIndex = 0;
}
