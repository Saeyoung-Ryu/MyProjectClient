@page "/FirstPage"
@using System.Net.Mail
@using System.Net
@using System.Text

@inject IJSRuntime JSRuntime
<DisplayPage/>
<PageTitle>FirstPage</PageTitle>

<a href="https://front.codes/" class="logo" target="_blank">
    <img src="https://assets.codepen.io/1462889/fcy.png" alt="">
  </a>

  <div class="section">
    <div class="container">
      <div class="row full-height justify-content-center">
        <div class="col-12 text-center align-self-center py-5">
          <div class="section pb-5 pt-5 pt-sm-2 text-center">
            <h6 class="mb-0 pb-3"><span>Log In </span><span>Sign Up</span></h6>
                  <input class="checkbox" type="checkbox" id="reg-log" name="reg-log"/>
                  <label for="reg-log"></label>
            <div class="card-3d-wrap mx-auto">
              <div class="card-3d-wrapper">
                <div class="card-front">
                  <div class="center-wrap">
                    <div class="section text-center">
                      <h4 class="mb-4 pb-3">Log In</h4>
                      <div class="form-group">
                        <input type="email" name="logemail" class="form-style" placeholder="Your Email" id="logemail" autocomplete="off">
                        <i class="input-icon uil uil-at"></i>
                      </div>  
                      <div class="form-group mt-2">
                        <input type="password" name="logpass" class="form-style" placeholder="Your Password" id="logpass" autocomplete="off">
                        <i class="input-icon uil uil-lock-alt"></i>
                      </div>
                      <a href="#" class="btn mt-4">submit</a>
                                    <p class="mb-0 mt-4 text-center"><a href="#0" class="link">Forgot your password?</a></p>
                        </div>
                      </div>
                    </div>
                <div class="card-back">
                  <div class="center-wrap">
                    <div class="section text-center">
                      <h4 class="mb-4 pb-3">Sign Up</h4>
                      <div class="form-group mt-2">
                        <input type="email" name="logemail" @bind="email" class="form-style" placeholder="Your Email" id="logemail" autocomplete="off">
                        <i class="input-icon uil uil-at"></i>
                      </div>  
                      <div class="form-group mt-2">
                        <input type="password" name="logpass" @bind="password" class="form-style" placeholder="Your Password" id="logpass" autocomplete="off">
                        <i class="input-icon uil uil-lock-alt"></i>
                      </div>
                      <div class="form-group mt-2">
                        <input type="password" name="confirmLogpass" @bind="confirmPassword" class="form-style" placeholder="Confirm Password" id="confirmLogpass" autocomplete="off">
                        <i class="input-icon uil uil-lock-alt"></i>
                      </div>
                      @if (!isAuthenticated)
                      {
                        <a class="btn mt-4" @onclick="@SendEmailAsync">인증 메일 보내기</a>
                      }
                      @if (showAuthInput)
                      {
                        <br>
                        <div class="form-group">
                          <input type="text" name="logname" @bind="authToken" class="form-style" placeholder="인증 코드" id="authToken" autocomplete="off">
                          <i class="input-icon uil uil-user"></i>
                        </div> 
                        <a class="btn mt-4" @onclick="@CheckAuthTokenAsync">인증하기</a>
                      }
                      @if (isAuthenticated)
                      {
                        <br>
                        <div class="form-group">
                          <input type="text" name="logname" @bind="nickname" class="form-style" placeholder="Nickname" id="logname" autocomplete="off">
                          <i class="input-icon uil uil-user"></i>
                        </div>  
                      }
                    </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
      </div>
  </div>


<Footer></Footer>

@code
{
    private const string Alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static readonly Random random = new Random();
  
    string fromAddress = "usaeyoung9514@gmail.com";
    string fromPassword = "vscb urfv rxis rzlt"; // 이메일 계정 비밀번호
    string smtpServer = "smtp.gmail.com"; // 이메일 제공자의 SMTP 서버 주소
    int port = 587; // 포트 번호 (보통 587 또는 465)
    bool enableSSL = true; // SSL 사용 여부

    string email = "recipient@example.com";
    string subject = "인증 메일";
    string nickname = String.Empty;
    string password = String.Empty;
    string confirmPassword = String.Empty;
    string authToken = String.Empty;

    bool showAuthInput = false;
    bool isAuthenticated = false;

    public string GenerateToken(int length)
    {
        var tokenBuilder = new StringBuilder();
        for (int i = 0; i < length; i++)
        {
            char randomChar = Alphabet[random.Next(Alphabet.Length)];
            tokenBuilder.Append(randomChar);
        }
        return tokenBuilder.ToString();
    }

  private async Task CheckAuthTokenAsync()
  {
    isAuthenticated = true;
    showAuthInput = false;
  }
  
    private async Task SendEmailAsync()
    {
      if (password != confirmPassword)
      {
        Console.WriteLine("비밀번호와 비밀번호 확인이 일치하지 않습니다.");
        return;
      }
        Console.WriteLine("이메일 전송을 시작합니다.");
        StringBuilder bodyStringBuilder = new StringBuilder();

        string token = GenerateToken(10);
        bodyStringBuilder.AppendLine($"안녕하세요! 이메일 인증 메일입니다. 인증코드는 다음과 같습니다: {token}");
    
        SmtpClient client = new SmtpClient(smtpServer)
        {
            Port = port,
            Credentials = new NetworkCredential(fromAddress, fromPassword),
            EnableSsl = enableSSL
        };

        MailMessage mailMessage = new MailMessage(fromAddress, email)
        {
            Subject = subject,
            Body = bodyStringBuilder.ToString()
        };
    
        try
        {
            client.Send(mailMessage);
            Console.WriteLine("이메일이 성공적으로 전송되었습니다.");
            showAuthInput = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Console.WriteLine($"이메일 전송 중 오류가 발생했습니다: {ex.Message}");
        }
    }
}




