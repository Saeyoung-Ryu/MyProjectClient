@page "/Setting"

@inject NavigationManager Navigation
@inject IMatToaster Toaster
@inject PlayerService PlayerService

@if (PlayerService.Player.Suid > 0)
{
    <div class="custom-container">
        <MudPaper Width="250px" Class="py-3 custom-mudpaper" Elevation="0">
            <MudNavMenu>
                <MudText Typo="Typo.h3" Class="px-2">Setting</MudText>

                <MudDivider Class="my-2"/>
                <MudNavLink Href="/dashboard">Dashboard</MudNavLink>
                <MudNavLink Href="/servers">Servers</MudNavLink>
                <MudNavLink Href="/billing" Disabled="true">Billing</MudNavLink>
                <MudNavGroup Title="Settings" Expanded="true">
                    <MudNavLink Href="/users">Users</MudNavLink>
                    <MudNavLink Href="/security">Security</MudNavLink>
                </MudNavGroup>
                <MudNavLink Href="/about">About</MudNavLink>
            </MudNavMenu>
        </MudPaper>
    </div>
}

@code
{
    private bool _initialized = false;
    
    protected override Task OnInitializedAsync()
    {
        _showProgressBar = Toaster.Configuration.ShowProgressBar;
        _showCloseButton = Toaster.Configuration.ShowCloseButton;
        _maximumOpacity = Toaster.Configuration.MaximumOpacity.ToString();
 
        _showTransitionDuration = Toaster.Configuration.ShowTransitionDuration.ToString();
        _visibleStateDuration = Toaster.Configuration.VisibleStateDuration.ToString();
        _hideTransitionDuration = Toaster.Configuration.HideTransitionDuration.ToString();
 
        _requireInteraction = Toaster.Configuration.RequireInteraction;
        
        return base.OnInitializedAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            await PlayerService.InitializePlayerAsync();
            _initialized = true;
            StateHasChanged(); // Notify the component to re-render

            if (PlayerService.Player.Suid == 0)
            {
                ShowError(MatToastType.Warning, "로그인 후 이용 가능합니다");
            }
        }
    }
}

@code 
{
    private string _title = "";
    private string _message = "Test Message";
    private bool _showProgressBar;
    private bool _showCloseButton;
    private bool _actionOnClick;
    private string _maximumOpacity;

    private string _showTransitionDuration;
    private string _visibleStateDuration;
    private string _hideTransitionDuration;

    private bool _requireInteraction;

    public string _maxDisplayedToasts
    {
        get { return Toaster.Configuration.MaxDisplayedToasts.ToString(); }
        set { Toaster.Configuration.MaxDisplayedToasts = Convert.ToInt32(value); }
    }

    private string _toastPosition
    {
        get { return Toaster.Configuration.Position.ToString(); }
        set { Toaster.Configuration.Position = (MatToastPosition)Enum.Parse(typeof(MatToastPosition), value); }
    }

    private void ShowDashBoardNotExist(MatToastType type, string message, string icon = "")
    {
        Toaster.Add(message, type, _title, icon, config =>
        {
            config.ShowCloseButton = _showCloseButton;
            config.ShowProgressBar = _showProgressBar;
            config.MaximumOpacity = Convert.ToInt32(_maximumOpacity);

            config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
            config.VisibleStateDuration = Convert.ToInt32(_visibleStateDuration);
            config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

            config.RequireInteraction = _requireInteraction;

            if (_actionOnClick)
            {
                config.Onclick = toast =>
                {
                    Console.WriteLine($"Title: \"{toast.Title}\"; message: \"{toast.Message}\"; Type: {toast.Options.Type}");
                    return Task.CompletedTask;
                };
            }
        });
    }
    
    private void ShowError(MatToastType type, string message, string icon = "")
    {
        Toaster.Add(message, type, _title, icon, config =>
        {
            config.ShowCloseButton = _showCloseButton;
            config.ShowProgressBar = _showProgressBar;
            config.MaximumOpacity = Convert.ToInt32(_maximumOpacity);

            config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
            config.VisibleStateDuration = Convert.ToInt32(_visibleStateDuration);
            config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

            config.RequireInteraction = _requireInteraction;

            if (_actionOnClick)
            {
                config.Onclick = toast =>
                {
                    Console.WriteLine($"Title: \"{toast.Title}\"; message: \"{toast.Message}\"; Type: {toast.Options.Type}");
                    return Task.CompletedTask;
                };
            }
        });
    }
}