@page "/DivideTeam"
@using BlazorApp3.Common.Type
@using Enum
@using BlazorApp3.Common.Manager
@using System.Runtime.CompilerServices
@using System.Text.RegularExpressions
@using BlazorApp3.Protocol
@using Microsoft.Data.Sqlite
@using System.Text.Json

@inject IJSRuntime JSRuntime
<DisplayPage/>
<PageTitle>팀나누기</PageTitle>

<div class="wrapper">
    <div class="home-container">
    <div>
        <main>
            <section class="content">
                <div class="search-container" style="display: flex; align-items: center;">
                    <div style="display: flex; flex-direction: column; align-items: center;">
                        <img src="testImage.jpg" alt="UserSearch Image" style="width: 280px; height: 170px;" />
                        <div style="display: flex; align-items: center; margin-top: 10px;">
                            <MatTextField @bind-Value="@NickName" Label="Enter NickName" Icon="search" style="line-height: 2.8; height: 2.8em; margin-right: 10px;"></MatTextField>
                            <button type="button" class="btn btn-secondary" @onclick="@InsertBtnAsync" style="line-height: 2.8; height: 2.8em;">추가하기</button>
                        </div>
                    </div>
                </div>
            </section>
        </main>

        @if (userTeamDivideInfos.Count > 0)
        {
            <div style="text-align: center;">
                <br/>
                <button class="btn btn-danger" @onclick="ResetUserListAsyncBtn">Reset</button>
                @if (userTeamDivideInfos.Count == 10)
                {
                    if (startBtnActive)
                    {
                        <button class="btn btn-primary" @onclick="DivideTeamBtn">시작</button>
                    }
                    else
                    {
                        <button class="btn btn-info" @onclick="SetAllPositionNoneBtn">포지션 초기화</button>
                    }
                }
                @if (supUsers.Count > 0)
                {
                    @if ((team1Info.IsAllFilled() && team2Info.IsAllFilled()) && (team1Info.teamSide == 0 || team2Info.teamSide == 0))
                    {
                        <button class="btn btn-primary" @onclick="SetTeamBtn">팀 선택</button>
                    }
                    else if (team1Info.IsAllFilled() && team2Info.IsAllFilled() && (team1Info.teamSide != 0 || team2Info.teamSide != 0))
                    {
                        <button class="btn btn-warning" @onclick="SwapTeamBtnAsync">팀 스왑</button>
                    }
                }
                <br><br>
                <div style="display: inline-block; text-align: left;">
                    <table id="Border-Solid" style="display: inline-block; margin-right: 20px;" class="table table-border table-hover w-auto">
                        <thead>
                        <tr class="table-primary">
                            <th>닉네임</th>
                            <th>라인</th>
                            <th>제외</th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var userinfo in userTeamDivideInfos)
                        {
                            <tr>
                                <td>
                                    <p>@userinfo.UserInfo.UserName</p></td>
                                <td>
                                    <p>
                                        <select class="form-select" style="width: 120px; height:40px" @onchange="(e) => userinfo.LineType = (LineType) (Enum.Parse(typeof(LineType), e.Value.ToString()))">
                                            @foreach (object lineTypeString in Enum.GetValues(typeof(LineType)))
                                            {
                                                if (lineTypeString.ToString() == "None")
                                                    continue;

                                                <option value="@lineTypeString" selected="@(lineTypeString.ToString() == userinfo.LineType.ToString())">@lineTypeString.ToString()</option>
                                            }
                                        </select>
                                    </p>
                                </td>
                                <td>
                                    <p>
                                        <select class="form-select" style="width: 120px; height:40px" @onchange="(e) => userinfo.ExceptionLine = (LineType) (Enum.Parse(typeof(LineType), e.Value.ToString()))">
                                            @foreach (object lineTypeString in Enum.GetValues(typeof(LineType)))
                                            {
                                                if (lineTypeString.ToString() == "Random")
                                                    continue;

                                                <option value="@lineTypeString" selected="@(lineTypeString.ToString() == userinfo.ExceptionLine.ToString())">@lineTypeString.ToString()</option>
                                            }
                                        </select>
                                    </p>
                                </td>
                                <td><button class="btn btn-warning" @onclick="@(e => DeleteUserInListBtnAsync(@userinfo))">Remove</button></td>
                            </tr>
                        }
                        </tbody>
                    </table>

                    @if (supUsers.Count > 0)
                    {
                        <table id="Border-Solid" style="display: inline-block;" class="table table-border table-hover w-auto">
                            <thead>
                            <tr class="table-primary">
                                <th>라인</th>
                                @if (team1Info.teamSide == 0)
                                {
                                    <th></th>
                                    <th></th>
                                }
                                else
                                {
                                    <th>
                                        @(team1Info.teamSide + " 팀")
                                    </th>
                                    <th>
                                        @(team2Info.teamSide + " 팀")
                                    </th>
                                }
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                <th>탑</th>
                                <td>
                                    <select name="CanReward" class="form-select" style="width: 200px; height:40px" @onchange="(e) => team1Info.topUser = (e.Value.ToString())">
                                        <option value=@String.Empty> -- -- </option>
                                        @foreach (var user in topUsers)
                                        {
                                            <option value="@user.UserInfo.UserName">@user.UserInfo.UserName</option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <select name="CanReward" class="form-select" style="width: 200px; height:40px" @onchange="(e) => team2Info.topUser = (e.Value.ToString())">
                                        <option value=@String.Empty> -- -- </option>
                                        @foreach (var user in topUsers)
                                        {
                                            <option value="@user.UserInfo.UserName">@user.UserInfo.UserName</option>
                                        }
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <th>정글</th>
                                <td>
                                    <select name="CanReward" class="form-select" style="width: 200px; height:40px" @onchange="(e) => team1Info.jgUser = (e.Value.ToString())">
                                        <option value=@String.Empty> -- -- </option>
                                        @foreach (var user in jgUsers)
                                        {
                                            <option value="@user.UserInfo.UserName">@user.UserInfo.UserName</option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <select name="CanReward" class="form-select" style="width: 200px; height:40px" @onchange="(e) => team2Info.jgUser = (e.Value.ToString())">
                                        <option value=@String.Empty> -- -- </option>
                                        @foreach (var user in jgUsers)
                                        {
                                            <option value="@user.UserInfo.UserName">@user.UserInfo.UserName</option>
                                        }
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <th>미드</th>
                                <td>
                                    <select name="CanReward" class="form-select" style="width: 200px; height:40px" @onchange="(e) => team1Info.midUser = (e.Value.ToString())">
                                        <option value=@String.Empty> -- -- </option>
                                        @foreach (var user in midUsers)
                                        {
                                            <option value="@user.UserInfo.UserName">@user.UserInfo.UserName</option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <select name="CanReward" class="form-select" style="width: 200px; height:40px" @onchange="(e) => team2Info.midUser = (e.Value.ToString())">
                                        <option value=@String.Empty> -- -- </option>
                                        @foreach (var user in midUsers)
                                        {
                                            <option value="@user.UserInfo.UserName">@user.UserInfo.UserName</option>
                                        }
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <th>원딜</th>
                                <td>
                                    <select name="CanReward" class="form-select" style="width: 200px; height:40px" @onchange="(e) => team1Info.adcUser = (e.Value.ToString())">
                                        <option value=@String.Empty> -- -- </option>
                                        @foreach (var user in adcUsers)
                                        {
                                            <option value="@user.UserInfo.UserName">@user.UserInfo.UserName</option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <select name="CanReward" class="form-select" style="width: 200px; height:40px" @onchange="(e) => team2Info.adcUser = (e.Value.ToString())">
                                        <option value=@String.Empty> -- -- </option>
                                        @foreach (var user in adcUsers)
                                        {
                                            <option value="@user.UserInfo.UserName">@user.UserInfo.UserName</option>
                                        }
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <th>서폿</th>
                                <td>
                                    <select name="CanReward" class="form-select" style="width: 200px; height:40px" @onchange="(e) => team1Info.supUser = (e.Value.ToString())">
                                        <option value=@String.Empty> -- -- </option>
                                        @foreach (var user in supUsers)
                                        {
                                            <option value="@user.UserInfo.UserName">@user.UserInfo.UserName</option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <select name="CanReward" class="form-select" style="width: 200px; height:40px" @onchange="(e) => team2Info.supUser = (e.Value.ToString())">
                                        <option value=@String.Empty> -- -- </option>
                                        @foreach (var user in supUsers)
                                        {
                                            <option value="@user.UserInfo.UserName">@user.UserInfo.UserName</option>
                                        }
                                    </select>
                                </td>
                            </tr>
                            </tbody>
                        </table>

        @*@if ((team1Info.IsAllFilled() && team2Info.IsAllFilled()) && (team1Info.teamSide == 0 || team2Info.teamSide == 0))
        {
            <button class="btn btn-primary" @onclick="SetTeamBtn">팀 선택</button>
        }
        else if(team1Info.IsAllFilled() && team2Info.IsAllFilled() && (team1Info.teamSide != 0 || team2Info.teamSide != 0))
        {
            <button class="btn btn-warning" @onclick="SwapTeamBtnAsync">팀 스왑</button>
        }*@
                    }
                </div>
            </div>
            <div style="clear: both;"></div>
            <br><br><br><br><br>
        }
    </div>
</div>
</div>

<Footer></Footer>

@code
{
    bool isLoading = false;
    
    public class TeamInfo
    {
        public int teamSide;
        
        public string topUser = string.Empty;
        public string jgUser = string.Empty;
        public string midUser = string.Empty;
        public string adcUser = string.Empty;
        public string supUser = string.Empty;

        public bool IsAllFilled()
        {
            if (topUser != String.Empty && jgUser != String.Empty && midUser != String.Empty && adcUser != String.Empty & supUser != String.Empty)
                return true;

            return false;
        }
    }
}

@code
{
    bool startBtnActive = true;
    
    bool panelOpenState = true;
    string NickName = "";
    List<UserTeamDivideInfo> userTeamDivideInfos = new List<UserTeamDivideInfo>();

    List<UserTeamDivideInfo> topUsers = new List<UserTeamDivideInfo>();
    List<UserTeamDivideInfo> jgUsers = new List<UserTeamDivideInfo>();
    List<UserTeamDivideInfo> midUsers = new List<UserTeamDivideInfo>();
    List<UserTeamDivideInfo> adcUsers = new List<UserTeamDivideInfo>();
    List<UserTeamDivideInfo> supUsers = new List<UserTeamDivideInfo>();

    public TeamInfo team1Info = new TeamInfo();
    public TeamInfo team2Info = new TeamInfo();

    protected override async Task OnInitializedAsync()
    {
        var storedData = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userTeamDivideInfos");

        if (!string.IsNullOrEmpty(storedData))
        {
            userTeamDivideInfos = JsonSerializer.Deserialize<List<UserTeamDivideInfo>>(storedData);
        }
    }

    private void ResetLists()
    {
        topUsers.Clear();
        jgUsers.Clear();
        midUsers.Clear();
        adcUsers.Clear();
        supUsers.Clear();
    }

    private void ResetObjects()
    {
        team1Info = new TeamInfo();
        team2Info = new TeamInfo();
    }
    
    private async Task InsertBtnAsync()
    {
        if(userTeamDivideInfos.Count >= 10)
            return;
        
        // var user = await AccountDB.GetUserInfoAsync(NickName);
        UserTeamDivideInfo utd = new UserTeamDivideInfo();
        
        utd.UserInfo = await UserManager.GetUserApproximateAsync(NickName);
        
        if (userTeamDivideInfos.Select(e => e.UserInfo.UserName).Contains(utd.UserInfo.UserName)) 
            return;
        
        userTeamDivideInfos.Add(utd);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userTeamDivideInfos", JsonSerializer.Serialize(userTeamDivideInfos));

        NickName = String.Empty;
    }

    private async Task ResetUserListAsyncBtn()
    {
        userTeamDivideInfos.Clear();
        ResetLists();
        ResetObjects();
        
        startBtnActive = true;
        await JSRuntime.InvokeVoidAsync("localStorage.clear");
    }

    private void SetAllPositionNoneBtn()
    {
        foreach (var teamDivideInfo in userTeamDivideInfos)
        {
            teamDivideInfo.LineType = LineType.Random;
            teamDivideInfo.ExceptionLine = LineType.None;
        }
        
        ResetLists();
        
        team1Info = new TeamInfo();
        team2Info = new TeamInfo();

        startBtnActive = !startBtnActive;
    }
    
    private void DeleteUserInListBtnAsync(UserTeamDivideInfo user)
    {
        for (int i = 0; i < userTeamDivideInfos.Count; i++)
        {
            if(user.UserInfo.UserName == userTeamDivideInfos[i].UserInfo.UserName)
                userTeamDivideInfos.RemoveAt(i);
        }
    }

    private async Task DivideTeamBtn()
    {
        isLoading = true;
        var list = DivideTeamManager.DivideTeam(userTeamDivideInfos);
        list = list.OrderBy(e => e.LineType).ToList();
        userTeamDivideInfos = list;

        topUsers = userTeamDivideInfos.Where(e => e.LineType == LineType.Top).ToList();
        jgUsers = userTeamDivideInfos.Where(e => e.LineType == LineType.Jungle).ToList();
        midUsers = userTeamDivideInfos.Where(e => e.LineType == LineType.Mid).ToList();
        adcUsers = userTeamDivideInfos.Where(e => e.LineType == LineType.Adc).ToList();
        supUsers = userTeamDivideInfos.Where(e => e.LineType == LineType.Support).ToList();
        isLoading = false;

        startBtnActive = !startBtnActive;
    }

    private async Task SetTeamBtn()
    {
        Random rand = new Random();
        int randomNumber = rand.Next(1, 3); // Generates a random number between 1 and 2 inclusive

        int otherNumber;
        if (randomNumber == 1)
            otherNumber = 2;
        else
            otherNumber = 1;

        team1Info.teamSide = randomNumber;
        team2Info.teamSide = otherNumber;

        List<TeamInfo> teams = new List<TeamInfo>() {team1Info, team2Info};

        var team1SetInfo = teams.First(e => e.teamSide == 1);
        var team2SetInfo = teams.First(e => e.teamSide == 2);

        LogMatchHistory logMatchHistory = new LogMatchHistory()
        {
            Team1Data = $"{team1SetInfo.topUser}, {team1SetInfo.jgUser}, {team1SetInfo.midUser}, {team1SetInfo.adcUser}, {team1SetInfo.supUser}",
            Team2Data = $"{team2SetInfo.topUser}, {team2SetInfo.jgUser}, {team2SetInfo.midUser}, {team2SetInfo.adcUser}, {team2SetInfo.supUser}",
            Team1Win = -1,
            Team2Win = -1
        };

        // await LogDB.InsertLogMatchHistoryAsync(logMatchHistory); 서버 이전
        using (var client = new HttpClient())
        {
            SetTeamReq setTeamReq = new SetTeamReq()
            {
                LogMatchHistory = logMatchHistory
            };
            
            client.BaseAddress = new Uri(MyProjectInfoConfig.Instance.ServerAddress);
            var response = await client.PostAsJsonAsync("/api/MatchHistory/SetTeam", setTeamReq);
            Console.WriteLine("Protocol : MatchHistory/SetTeam");
        }
        
    }
    
    private async Task SwapTeamBtnAsync()
    {
        (team1Info.teamSide, team2Info.teamSide) = (team2Info.teamSide, team1Info.teamSide);

        Console.WriteLine($"Team1Info Adc = {team1Info.adcUser} Team1Info sid = {team1Info.teamSide}");
        
        List<TeamInfo> teams = new List<TeamInfo>() {team1Info, team2Info};

        var team1SetInfo = teams.First(e => e.teamSide == 1);
        var team2SetInfo = teams.First(e => e.teamSide == 2);

        LogMatchHistory logMatchHistory = new LogMatchHistory()
        {
            Team1Data = $"{team1SetInfo.topUser}, {team1SetInfo.jgUser}, {team1SetInfo.midUser}, {team1SetInfo.adcUser}, {team1SetInfo.supUser}",
            Team2Data = $"{team2SetInfo.topUser}, {team2SetInfo.jgUser}, {team2SetInfo.midUser}, {team2SetInfo.adcUser}, {team2SetInfo.supUser}",
            Team1Win = -1,
            Team2Win = -1
        };

        // await LogDB.InsertLogMatchHistoryAsync(logMatchHistory); 서버이전
        
        using (var client = new HttpClient())
        {
            SetTeamReq setTeamReq = new SetTeamReq()
            {
                LogMatchHistory = logMatchHistory
            };
            
            client.BaseAddress = new Uri(MyProjectInfoConfig.Instance.ServerAddress);
            var response = await client.PostAsJsonAsync("/api/MatchHistory/SetTeam", setTeamReq);
            Console.WriteLine("Protocol : MatchHistory/SetTeam");
        }
    }

    // Team1 = 1팀, 2팀 랜덤선택된 그 팀
    private async Task Team1WinBtnAsync()
    {
        Console.WriteLine("1팀 승리");
    }

    private async Task Team2WinBtnAsync()
    {
        Console.WriteLine("2팀 승리");
    }
}

@code
{
    bool dialogIsOpen = false;
    string nickNameToAdd = String.Empty;
    
    void OpenDialog()
    {
        dialogIsOpen = true;
    }
 
    void CloseDialog()
    {
        dialogIsOpen = false;
    }

    string newNickName = "";
    
    public async Task AddNewUserAsyncBtn()
    {
        var userInfo = await UserManager.GetUserAsync(NickName);

        if (userInfo != null)
        {
            Console.WriteLine("Here1");
            dialogIsOpen = false;
            return;
        }

        var isSuccess = await UserManager.SetNewUserAsync(newNickName);
        
        if (isSuccess == false)
        {
            Console.WriteLine("Here2");
            dialogIsOpen = false;
            return;
        }
        
        newNickName = String.Empty;
        dialogIsOpen = false;
    }
}
