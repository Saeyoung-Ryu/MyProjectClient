@page "/EditUser"
@using BlazorApp3.Common.Type
@using BlazorApp3.Common.Manager
@using BlazorApp3.Protocol
@using Enum

@inject IMatToaster Toaster

<PageTitle>유저 정보 수정</PageTitle>

<h1>유저 정보 수정</h1>
<hr />
<br>

@if (isLoading)
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}
else
{
    @if (dialogIsOpen)
{
    <MatAccordion>
        <MatButton OnClick="@OpenDialog" Raised="true">메일 지급하기 ⊕</MatButton>
        <MatDialog @bind-IsOpen="@dialogIsOpen">
            <MatDialogContent>
                <p3>Enter Password</p3>
                <input type="text" size="10" @bind="@Password">
                <button type="submit" class="btn btn-warning" @onclick="@EditAllAsyncBtn">확인</button>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@CloseDialog">닫기</MatButton>
            </MatDialogActions>
        </MatDialog>
    </MatAccordion>
}
<table id="Border-Solid" class="table table-border table-hover w-auto">
    <thead>
    <tr class="table-primary">
        <th>수정할 닉네임</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td><input type="text" size="20" @bind="@NickName"> <button type="submit" class="btn btn-info" @onclick="@SearchUserAsyncBtn">검색</button></td>
    </tr>
    </tbody>
</table>

<br><br>

@if (searchedUser != null)
{
    <table id="Border-Solid" class="table table-border table-hover w-auto">
        <tbody>
        <tr>
            <th>닉네임</th>
            <td><input type="text" size="20" @bind="@searchedUser.UserName"></td>
        </tr>
        </tbody>
    </table>
    <table id="Border-Solid" class="table table-border table-hover w-auto">
        <thead>
        <tr class="table-primary">
            <th>포지션</th>
            <th>승리</th>
            <th>패배</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var userWinRateHistory in UserWinRateHistories)
        {
            <tr>
                <td>@(((LineType) userWinRateHistory.LineType).ToString())</td>
                <td><input type="text" size="7" @bind="@userWinRateHistory.WinCount"></td>
                <td><input type="text" size="7" @bind="@userWinRateHistory.LoseCount"></td>
            </tr>
        }
        </tbody>
    </table>
    <button type="submit" class="btn btn-warning" @onclick="@OpenEnterPasswordPanel">수정</button>
}
}


@code
{
    bool isLoading = false;
    
    public string Password = String.Empty;
    public string NickName = String.Empty;
    public UserInfo searchedUser;
    public List<UserWinRateHistory> UserWinRateHistories = new List<UserWinRateHistory>();

    private void Reset()
    {
        NickName = String.Empty;
        searchedUser = null;
        UserWinRateHistories = new List<UserWinRateHistory>();
    }
    
    private async Task SearchUserAsyncBtn()
    {
        var userInfo = await UserManager.GetUserAsync(NickName);

        if (userInfo == null)
        {
            return;
        }

        searchedUser = userInfo;
        // UserWinRateHistories = await AccountDB.GetUserWinRateHistoryAsync(searchedUser.Seq);
        
        isLoading = true;
        using (var client = new HttpClient())
        {
            GetUserWinRateHistoryReq getUserWinRateHistoryReq = new GetUserWinRateHistoryReq()
            {
                Seq = searchedUser.Seq
            };
            
            client.BaseAddress = new Uri(MyProjectInfoConfig.Instance.ServerAddress);
            var response = await client.PostAsJsonAsync("/api/GetUserWinRateHistory", getUserWinRateHistoryReq);
            Console.WriteLine("Protocol : GetUserWinRateHistory");
            var getUserWinRateHistoryRes = await response.Content.ReadFromJsonAsync<GetUserWinRateHistoryRes>();

            if( getUserWinRateHistoryRes != null)
                UserWinRateHistories = getUserWinRateHistoryRes.UserWinRateHistory;
        }
        isLoading = false;
        
        NickName = String.Empty;
    }

    private async Task EditAllAsyncBtn()
    {
        @if (Password != "1234")
        {
            Show(MatToastType.Warning);
            return;
        }

        isLoading = true;
        await EditUserNickNameAsync();
        await EditUserWinRateAsync();
        
        /*{
            // Memory Update
            RankManager.totalRankList = new List<RankInfo>();
            RankManager.topRankList = new List<RankInfo>();
            RankManager.jgRankList = new List<RankInfo>();
            RankManager.midRankList = new List<RankInfo>();
            RankManager.adcRankList = new List<RankInfo>();
            RankManager.supRankList = new List<RankInfo>();
            
            await RankManager.SetOverallRankInfoListAsync();
            await RankManager.SetOtherLaneRanks();
        }*/

        isLoading = false;
        Show(MatToastType.Success);
        CloseDialog();
    }

    private void OpenEnterPasswordPanel()
    {
        dialogIsOpen = true;
    }

    private async Task EditUserNickNameAsync()
    {
        isLoading = true;
        using (var client = new HttpClient())
        {
            SetUserNickNameReq setUserNickNameReq = new SetUserNickNameReq()
            {
                NickName = searchedUser.UserName,
                Seq = searchedUser.Seq
            };
            
            client.BaseAddress = new Uri(MyProjectInfoConfig.Instance.ServerAddress);
            await client.PostAsJsonAsync("/api/SetUserNickName", setUserNickNameReq);
            Console.WriteLine("Protocol : SetUserNickName");
        }
        isLoading = false;
    }

    private async Task EditUserWinRateAsync()
    {
        isLoading = true;
        using (var client = new HttpClient())
        {
            SetUserWinRateHistoryReq setUserWinRateHistoryReq = new SetUserWinRateHistoryReq()
            {
                UserWinRateHistory = UserWinRateHistories,
                Seq = searchedUser.Seq,
                NickName = searchedUser.UserName
            };
            
            client.BaseAddress = new Uri(MyProjectInfoConfig.Instance.ServerAddress);
            await client.PostAsJsonAsync("/api/SetUserWinRateHistory", setUserWinRateHistoryReq);
            Console.WriteLine("Protocol : SetUserWinRateHistory");
        }
        isLoading = false;
    }
}
@code
{
    bool dialogIsOpen = false;
    bool panelOpenState = false;

    void OpenDialog()
    {
        dialogIsOpen = true;
    }
    
    void CloseDialog()
    {
        dialogIsOpen = false;
    }
}

@code {
    private string title = "";
    private string message = "";
    private bool showProgressBar;
    private bool showCloseButton;
    private bool actionOnClick;
    private string maximumOpacity;

    private string showTransitionDuration;
    private string visibleStateDuration;
    private string hideTransitionDuration;

    private bool requireInteraction;

    protected override void OnInitialized()
    {
        showProgressBar = Toaster.Configuration.ShowProgressBar;
        showCloseButton = Toaster.Configuration.ShowCloseButton;
        maximumOpacity = Toaster.Configuration.MaximumOpacity.ToString();

        showTransitionDuration = Toaster.Configuration.ShowTransitionDuration.ToString();
        visibleStateDuration = Toaster.Configuration.VisibleStateDuration.ToString();
        hideTransitionDuration = Toaster.Configuration.HideTransitionDuration.ToString();

        requireInteraction = Toaster.Configuration.RequireInteraction;
    }

    public void Show(MatToastType type, string icon = "")
    {
        if (type == MatToastType.Warning)
        {
            message = "Wrong Password!";
            icon = "error";
        }
        else
        {
            message = "Mail Added Success!";
            icon = "check_circle";
        }

        Toaster.Add(message, type, title, icon, config =>
        {
            config.ShowCloseButton = showCloseButton;
            config.ShowProgressBar = showProgressBar;
            config.MaximumOpacity = Convert.ToInt32(maximumOpacity);

            config.ShowTransitionDuration = Convert.ToInt32(showTransitionDuration);
            config.VisibleStateDuration = Convert.ToInt32(visibleStateDuration);
            config.HideTransitionDuration = Convert.ToInt32(hideTransitionDuration);

            config.RequireInteraction = requireInteraction;
        });
    }
}
