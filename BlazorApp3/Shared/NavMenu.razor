@using Protocol
@using Protocol.Enum
@using Protocol.Type
@inject NavigationManager Navigation
@inject IMatToaster Toaster
@inject PlayerService PlayerService

<nav class="navbar navbar-expand-md navbar-dark bg-dark mb-4 custom-navbar">
    <div class="container-fluid">
        <a class="navbar-brand" href=""><span class="oi oi-home" aria-hidden="true"></span></a>
        <button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
            <form class="d-flex me-auto" role="search" @onsubmit="MoveToDashBoardPage">
                <input class="form-control me-2" type="search" placeholder="대시보드 검색" aria-label="Search" @bind="searchedDashBoardName">
                <button class="btn btn-outline-light" type="submit">Search</button>
            </form>
            <ul class="navbar-nav ms-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <button class="btn nav-link" @onclick="ShowDashboardCreatePopup">
                        <span class="oi oi-plus" aria-hidden="true"></span> 대시보드 생성
                    </button>
                </li>
                <li class="nav-item">
                    <button class="btn nav-link" @onclick="ShowPremiumShopPopup">
                        <span class="oi oi-star" aria-hidden="true"></span> PREMIUM
                    </button>
                </li>
                <li class="nav-item">
                    @if (PlayerService.Player.Suid == 0)
                    {
                        <button class="btn nav-link" @onclick="ShowLoginPopup">
                            <span class="oi oi-account-login" aria-hidden="true"></span> 로그인
                        </button>
                    }
                    else
                    {
                        <button class="btn nav-link" @onclick="LogOut">
                            <span class="oi oi-account-logout" aria-hidden="true"></span> 로그아웃
                        </button>
                    }
                </li>
            </ul>
        </div>
    </div>
</nav>

@if (openDashBoardCreatePopUp)
{
    <div class="modal-backdrop show"></div> <!-- Semi-transparent background -->
    <div class="modal show d-block" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">대시보드 생성</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDashboardCreatePopup"></button>
                </div>
                <div class="modal-body">
                    <br>
                    @if (PlayerService.Player.Suid == 0)
                    {
                        <p>로그인 이후 이용 가능합니다.</p>
                    }
                    else
                    {
                        <span>생성가능 횟수 : @createableDashBoardCount</span>
                        @*<div class="horizontal-container">*@
                        <MudTextField @bind-Value="createDashBoardName"
                                      Label="대시보드 이름 입력"
                                      Variant="Variant.Filled"
                                      MaxLength="15" />
                    
                        <p style="@GetHelperTextStyle()">@GetHelperText()</p>
                        <br>
                        <MudTextField @bind-Value="createDashBoardNotification" Label="소개글" Variant="Variant.Outlined" FullWidth="true" Placeholder="대시보드 소개글을 입력하세요." MaxLength="100" Disabled="@(createableDashBoardCount <= 0)"></MudTextField>
                        <br>
                        <MudButton Variant="Variant.Outlined" @onclick="CreateDashBoardBtnAsync" FullWidth="true" Disabled="@(createableDashBoardCount <= 0)">생성</MudButton>
                    }
                    @*</div>*@
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDashboardCreatePopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (openPremiumShopPopUp)
{
    <div class="modal-backdrop show"></div> <!-- Semi-transparent background -->
    <div class="modal show d-block" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">프리미엄 구매</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="ClosePremiumShopPopup"></button>
                </div>
                <div class="modal-body">
                    <!-- Your form or content here -->
                    <p>Modal content goes here.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClosePremiumShopPopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (openLoginPopUp)
{
    <div class="modal-backdrop show"></div> <!-- Semi-transparent background -->
    <div class="modal show d-block" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">로그인</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseLoginPopup"></button>
                </div>
                <div class="modal-body">
                    <br>
                    <div class="logo-container">
                        <img src="Logo.jpg" alt="Logo" class="logo" />
                    </div>
                    <br>
                    <div>
                        <MudTextField @bind-Value="Email" Label="Email" Variant="Variant.Outlined"/>
                    </div>
                    <div>
                        <MudTextField @bind-Value="Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password"/>
                    </div>
                    <br>
                    <div>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="LoginBtnAsync" Style="height: 50px">LOGIN</MudButton>
                    </div>
                    <br>
                    <div class="text-links">
                        <span class="link" @onclick="SignInClicked">Sign In</span> | <span class="link" @onclick="FindPasswordClicked">Find Password</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (DoSignIn)
{
    <div class="modal-backdrop show"></div> <!-- Semi-transparent background -->
    <div class="modal show d-block" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">회원가입</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseSignInPopUp"></button>
                </div>
                <div class="modal-body">
                    @if (isLoadingSendingVerificationMail)
                    {
                        <div style="display: flex; justify-content: center; align-items: center; height: 50vh;">
                            <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
                        </div>
                    }
                    else
                    {
                        <br>
                        <div class="logo-container">
                        <img src="Logo.jpg" alt="Logo" class="logo"/>
                        </div>
                        <br>
                        @if (!verificationMailSent && verificationResult == VerificationResult.None)
                        {
                            <div>
                            <MudTextField @bind-Value="Email" Label="Email" Variant="Variant.Outlined"/>
                            @if (signInResult == SignInResult.EmailAlreadyExist)
                            {
                                <div style="color: red; font-size: 0.8em;">이미 가입된 이메일 입니다.</div>
                            }
                            </div>
                            <div>
                                <MudTextField @bind-Value="Password" Label="비밀번호" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password"/>
                                @if (Password != String.Empty && !DidPasswordMetRules())
                                {
                                    <div style="color: red; font-size: 0.8em;">비밀번호 형식이 틀립니다.</div>
                                }
                                <div style="color: gray; font-size: 0.8em; margin-top: 4px;">
                                    비밀번호 규칙:
                                    <ul>
                                        <li>* 최소 8자 이상</li>
                                        <li>* 대문자 하나 이상 포함</li>
                                        <li>* 소문자 하나 이상 포함</li>
                                        <li>* 숫자 하나 이상 포함</li>
                                        <li>* 특수 문자 하나 이상 포함</li>
                                    </ul>
                                </div>
                            </div>
                            <div>
                                <MudTextField @bind-Value="CheckPassword" Label="비밀번호 확인" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password"/>
                                @if (!string.IsNullOrEmpty(Password) && !string.IsNullOrEmpty(CheckPassword) && Password != CheckPassword)
                                {
                                    <div style="color: red; font-size: 0.8em;">비밀번호가 다릅니다.</div>
                                }
                            </div>
                        }
                        @if (verificationResult != VerificationResult.Success)
                        {
                            <br>
                            <div>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!DidPasswordMetRules() || string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(CheckPassword) || string.IsNullOrEmpty(Password) || Password != CheckPassword)" FullWidth="true" OnClick="SignInBtnStep1Async_SendVerificationMail" Style="height: 50px">@(verificationMailSent ? "인증메일 다시 보내기" : "인증메일 보내기")</MudButton>
                            </div>
                        }
                        @if (verificationMailSent)
                        {
                            <br>
                            <div>
                                <MudTextField @bind-Value="VerificationCode" Label="인증 코드를 입력하세요." Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="@timerDisplay"/>
                                @if (verificationResult == VerificationResult.Fail)
                                {
                                    <div style="color: red; font-size: 0.8em;">인증 코드가 틀렸습니다.</div>
                                }
                            </div>
                            <br>
                            <div>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="SignInBtnStep2Async_CheckCode" Style="height: 50px">확인</MudButton>
                            </div>
                        }
                        @if (verificationResult == VerificationResult.Success)
                        {
                            <br>
                            <div>
                                <div>
                                    <MudTextField @bind-Value="nickname" Label="닉네임" Variant="Variant.Outlined"/>
                                    @if (nickNameCreateResult == NickNameCreateResult.Duplicated)
                                    {
                                    <div style="color: red; font-size: 0.8em;">이미 사용중인 닉네임 입니다.</div>
                                    }
                                    else if (nickNameCreateResult == NickNameCreateResult.BadWord)
                                    {
                                    <div style="color: red; font-size: 0.8em;">사용 불가능한 단어가 포함되어 있습니다.</div>
                                    }
                                    else if (nickNameCreateResult == NickNameCreateResult.Success)
                                    {
                                    <div style="color: blue; font-size: 0.8em;">사용 가능한 닉네임 입니다.</div>
                                    }
                                    <br>
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="CheckDuplicatedNickNameBtnAsync">중복 확인</MudButton>
                                </div>
                            </div>
                            <br>
                            <div>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="@(nickNameCreateResult != NickNameCreateResult.Success)" OnClick="SignInBtnStep3Async_Final" Style="height: 50px">확인</MudButton>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (DoFindPassword)
{
    <div class="modal-backdrop show"></div> <!-- Semi-transparent background -->
    <div class="modal show d-block" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">비밀번호 찾기</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseFindPasswordPopup"></button>
                </div>
                <div class="modal-body">
                    @if (isLoadingSendingVerificationMail)
                    {
                        <div style="display: flex; justify-content: center; align-items: center; height: 50vh;">
                            <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
                        </div>
                    }
                    else
                    {
                        <br>
                        <div class="logo-container">
                            <img src="Logo.jpg" alt="Logo" class="logo"/>
                        </div>
                        <br>
                        @if (!verificationMailSent && verificationResult == VerificationResult.None)
                        {
                            <div>
                                <MudTextField @bind-Value="Email" Label="Email" Variant="Variant.Outlined"/>
                                @if (findPasswordResult == FindPasswordResult.NotExistEmail)
                                {
                                    <div style="color: red; font-size: 0.8em;">존재하지 않는 이메일 입니다.</div>
                                }
                                <br>
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SignInBtnStep1Async_SendVerificationMail">인증 메일 보내기</MudButton>
                            </div>
                            <div>
                                <MudTextField @bind-Value="Password" Label="비밀번호" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password"/>
                                @if (Password != String.Empty && !DidPasswordMetRules())
                                {
                                    <div style="color: red; font-size: 0.8em;">비밀번호 형식이 틀립니다.</div>
                                }
                                <div style="color: gray; font-size: 0.8em; margin-top: 4px;">
                                    비밀번호 규칙:
                                    <ul>
                                        <li>* 최소 8자 이상</li>
                                        <li>* 대문자 하나 이상 포함</li>
                                        <li>* 소문자 하나 이상 포함</li>
                                        <li>* 숫자 하나 이상 포함</li>
                                        <li>* 특수 문자 하나 이상 포함</li>
                                    </ul>
                                </div>
                            </div>
                            <div>
                                <MudTextField @bind-Value="CheckPassword" Label="비밀번호 확인" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password"/>
                                @if (!string.IsNullOrEmpty(Password) && !string.IsNullOrEmpty(CheckPassword) && Password != CheckPassword)
                                {
                                    <div style="color: red; font-size: 0.8em;">비밀번호가 다릅니다.</div>
                                }
                            </div>
                        }
                        @if (verificationResult != VerificationResult.Success)
                        {
                            <br>
                            <div>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!DidPasswordMetRules() || string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(CheckPassword) || string.IsNullOrEmpty(Password) || Password != CheckPassword)" FullWidth="true" OnClick="SignInBtnStep1Async_SendVerificationMail" Style="height: 50px">@(verificationMailSent ? "인증메일 다시 보내기" : "인증메일 보내기")</MudButton>
                            </div>
                        }
                        @if (verificationMailSent)
                        {
                            <br>
                            <div>
                                <MudTextField @bind-Value="VerificationCode" Label="인증 코드를 입력하세요." Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="@timerDisplay"/>
                                @if (verificationResult == VerificationResult.Fail)
                                {
                                    <div style="color: red; font-size: 0.8em;">인증 코드가 틀렸습니다.</div>
                                }
                            </div>
                            <br>
                            <div>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="SignInBtnStep2Async_CheckCode" Style="height: 50px">확인</MudButton>
                            </div>
                        }
                        @if (verificationResult == VerificationResult.Success)
                        {
                            <br>
                            <div>
                                <div>
                                    <MudTextField @bind-Value="nickname" Label="닉네임" Variant="Variant.Outlined"/>
                                    @if (nickNameCreateResult == NickNameCreateResult.Duplicated)
                                    {
                                        <div style="color: red; font-size: 0.8em;">이미 사용중인 닉네임 입니다.</div>
                                    }
                                    else if (nickNameCreateResult == NickNameCreateResult.BadWord)
                                    {
                                        <div style="color: red; font-size: 0.8em;">사용 불가능한 단어가 포함되어 있습니다.</div>
                                    }
                                    else if (nickNameCreateResult == NickNameCreateResult.Success)
                                    {
                                        <div style="color: blue; font-size: 0.8em;">사용 가능한 닉네임 입니다.</div>
                                    }
                                    <br>
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="CheckDuplicatedNickNameBtnAsync">중복 확인</MudButton>
                                </div>
                            </div>
                            <br>
                            <div>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="@(nickNameCreateResult != NickNameCreateResult.Success)" OnClick="SignInBtnStep3Async_Final" Style="height: 50px">확인</MudButton>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@code
{
    public enum FindPasswordResult
    {
        None = 0,
        NotExistEmail = 1,
    }
    
    public enum NickNameCreateResult
    {
        None = 0,
        Success = 1,
        Duplicated = 2,
        BadWord = 3,
        Failed = 4
    }
    
    public enum VerificationResult
    {
        None = 0,
        Success = 1,
        Fail = 2
    }
    
    public enum SignInResult
    {
        None = 0,
        Success = 1,
        EmailAlreadyExist = 2,
        PasswordCheckDifferent = 3
    }
}

@code {
    private bool collapseNavMenu = true;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;
    
    private bool openDashBoardCreatePopUp = false;
    private bool openLoginPopUp = false;
    private bool openPremiumShopPopUp = false;
    
    private string createDashBoardName = "";
    private string createDashBoardNotification = "";
    private bool isDuplicatedDashBoardName = false;
    private bool successCreateDashBoard = false;
    private string loginEmailAddress = "";

    private int createableDashBoardCount = 1;
    
    private string searchedDashBoardName = "";

    private bool dashBoardFound = false;
    
    // Login Objects
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    public string Email { get; set; } = "";
    public string VerificationCode { get; set; } = "";
    public string Password { get; set;} = "";
    public string CheckPassword { get; set; } = "";

    private string timerDisplay;
    private TimeSpan timeRemaining = TimeSpan.FromMinutes(5);
    private System.Timers.Timer timer;
    
    private bool DoSignIn { get; set; }
    private bool DoFindPassword { get; set; }
    
    private bool isLoadingSendingVerificationMail = false;

    private bool verificationMailSent = false;

    SignInResult signInResult = SignInResult.None;
    VerificationResult verificationResult = VerificationResult.None;
    FindPasswordResult findPasswordResult = FindPasswordResult.None;
    NickNameCreateResult nickNameCreateResult = NickNameCreateResult.None;
    
    private string nickname = "";
    
    private bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            await PlayerService.InitializePlayerAsync();
            _initialized = true;
            StateHasChanged(); // Notify the component to re-render
        }
    }

    void ResetLoginInfos()
    {
        Email = "";
        VerificationCode = "";
        Password = "";
        CheckPassword = "";

        DoSignIn = false;
        DoFindPassword = false;

        verificationMailSent = false;

        signInResult = SignInResult.None;

        timerDisplay = "";
        timeRemaining = TimeSpan.FromMinutes(5);
        
        if (timer != null)
            timer.Stop();
        
        isLoadingSendingVerificationMail = false;
        verificationResult = VerificationResult.None;
        nickname = "";
        nickNameCreateResult = NickNameCreateResult.None;
        findPasswordResult = FindPasswordResult.None;
    }
    
    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    
    private void SignInClicked()
    {
        openLoginPopUp = false;
        DoSignIn = true;
        // You can add additional logic here
    }

    private void FindPasswordClicked()
    {
        openLoginPopUp = false;
        DoFindPassword = true;
        // You can add additional logic here
    }

    private string GetHelperText()
    {
        if (successCreateDashBoard)
        {
            return "대시보드를 생성하였습니다";
        }
        else if (isDuplicatedDashBoardName)
        {
            return "이미 존재하는 대시보드입니다!";
        }
        return string.Empty;
    }
    
    private string GetHelperTextStyle()
    {
        if (successCreateDashBoard)
        {
            return "color: blue;";
        }
        else if (isDuplicatedDashBoardName)
        {
            return "color: red;";
        }
        return string.Empty;
    }

    private string GetHelperTextClass()
    {
        if (successCreateDashBoard)
        {
            return "helper-text-success";
        }
        else if (isDuplicatedDashBoardName)
        {
            return "helper-text-error";
        }
        return string.Empty;
    }
    
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ShowDashboardCreatePopup()
    {
        createDashBoardName = string.Empty;
        isDuplicatedDashBoardName = false;
        successCreateDashBoard = false;
        
        openDashBoardCreatePopUp = true;
    }

    private void CloseDashboardCreatePopup()
    {
        openDashBoardCreatePopUp = false;
    }

    private async Task LogOut()
    {
        PlayerService.Player = new Player();
        await PlayerService.ResetPlayerAsync();

        await ReloadPageAsync();
    }
    
    private void ShowLoginPopup()
    {
        DoSignIn = false;
        openLoginPopUp = true;
    }
    
    private void CloseFindPasswordPopup()
    {
        ResetLoginInfos();
        DoFindPassword = false;
    }

    private void CloseLoginPopup()
    {
        ResetLoginInfos();
        openLoginPopUp = false;
    }

    private void CloseSignInPopUp()
    {
        ResetLoginInfos();
        DoSignIn = false;
    }
    
    private void ShowPremiumShopPopup()
    {
        openPremiumShopPopUp = true;
    }

    private void ClosePremiumShopPopup()
    {
        openPremiumShopPopUp = false;
    }
    
    private async Task MoveToDashBoardPage()
    {
        try
        {
            Navigation.NavigateTo($"/DashBoardPage/{searchedDashBoardName}");
        }
        catch (Exception)
        {
            ShowToast(MatToastType.Warning, "잠시 후 다시 시도해주세요.");
        }
    }
    
    private void UpdateTimer(object sender, System.Timers.ElapsedEventArgs e)
    {
        if (timeRemaining.TotalSeconds > 0)
        {
            timeRemaining = timeRemaining.Subtract(TimeSpan.FromSeconds(1));
            timerDisplay = timeRemaining.ToString(@"mm\:ss");
            InvokeAsync(StateHasChanged); // Trigger re-render
        }
        else
        {
            timer.Stop();
        }
    }
    
    private bool DidPasswordMetRules()
    {
        if (string.IsNullOrEmpty(Password)) return false;

        bool hasMinimum8Chars = Password.Length >= 8;
        bool hasUpperCaseLetter = Password.Any(char.IsUpper);
        bool hasLowerCaseLetter = Password.Any(char.IsLower);
        bool hasDecimalDigit = Password.Any(char.IsDigit);
        bool hasSpecialCharacter = Password.Any(ch => !char.IsLetterOrDigit(ch));

        return hasMinimum8Chars && hasUpperCaseLetter && hasLowerCaseLetter && hasDecimalDigit && hasSpecialCharacter;
    }

    private async Task SignInBtnStep1Async_SendVerificationMail()
    {
        try
        {
            isLoadingSendingVerificationMail = true;

            // 인증메일 다시보내기를 누르면 타이머 초기화시키기
            if (timer != null)
            {
                timerDisplay = "";
                timeRemaining = TimeSpan.FromMinutes(5);
                timer.Stop();
            }

            timerDisplay = timeRemaining.ToString(@"mm\:ss");
            timer = new System.Timers.Timer(1000); // Set up the timer for 1 second intervals
            timer.Elapsed += UpdateTimer;
            timer.Start();

            var signInEmailAuthSendStepReq = new SignInEmailAuthSendStepReq()
            {
                ProtocolId = ProtocolId.SignInEmailAuthSendStep,
                Email = Email,
                LoginType = LoginType.Guest
            };

            var res = await HttpManager.SendHttpServerRequestAsync(signInEmailAuthSendStepReq);
            var signInEmailAuthSendStepRes = (SignInEmailAuthSendStepRes) res;

            // 이메일이 이미 존재하면 아래 작은글씨로 이미 존재하는 이메일이라고 보여주기

            if (signInEmailAuthSendStepRes.Result == Result.EmailAlreadyExists)
            {
                signInResult = SignInResult.EmailAlreadyExist;
                return;
            }
            else
                signInResult = SignInResult.Success;

            verificationMailSent = true; // 위치 아래로 바꾸기 테스트용
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            isLoadingSendingVerificationMail = false;
        }
    }

    private async Task SignInBtnStep2Async_CheckCode()
    {
        try
        {
            var signInEmailAuthVerifyStepReq = new SignInEmailAuthVerifyStepReq()
            {
                ProtocolId = ProtocolId.SignInEmailAuthVerifyStep,
                Code = VerificationCode,
                Email = Email,
            };
            
            var res = await HttpManager.SendHttpServerRequestAsync(signInEmailAuthVerifyStepReq);
            var signInEmailAuthVerifyStepRes = (SignInEmailAuthVerifyStepRes) res;

            if (!signInEmailAuthVerifyStepRes.VerifyResult)
                verificationResult = VerificationResult.Fail;
            else
            {
                verificationResult = VerificationResult.Success;

                // 팝업창 다음걸로 이동
                verificationMailSent = false;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task CheckDuplicatedNickNameBtnAsync()
    {
        try
        {
            var checkNicknameDuplicatedReq = new CheckNicknameDuplicatedReq()
            {
                ProtocolId = ProtocolId.CheckNicknameDuplicated,
                Nickname = nickname
            };
            
            var res = await HttpManager.SendHttpServerRequestAsync(checkNicknameDuplicatedReq);
            var checkNicknameDuplicatedRes = (CheckNicknameDuplicatedRes) res;
            
            if (checkNicknameDuplicatedRes.IsDuplicated)
                nickNameCreateResult = NickNameCreateResult.Duplicated;
            else
                nickNameCreateResult = NickNameCreateResult.Success;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task SignInBtnStep3Async_Final()
    {
        try
        {
            var signInEmailAuthFinalStepReq = new SignInEmailAuthFinalStepReq()
            {
                ProtocolId = ProtocolId.SignInEmailAuthFinalStep,
                Email = Email,
                Password = Password,
                NickName = nickname
            };
            
            var res = await HttpManager.SendHttpServerRequestAsync(signInEmailAuthFinalStepReq);
            var signInEmailAuthFinalStepRes = (SignInEmailAuthFinalStepRes) res;

            if (signInEmailAuthFinalStepRes.Result == Result.EmailAlreadyExists)
                nickNameCreateResult = NickNameCreateResult.Failed;
            else if (signInEmailAuthFinalStepRes.Result == Result.DuplicatedNickName)
                nickNameCreateResult = NickNameCreateResult.Duplicated;
            else
            {
                nickNameCreateResult = NickNameCreateResult.Success;
            
                // 로그인 팝업창으로 돌아가기
                ResetLoginInfos();
                PlayerService.Player = signInEmailAuthFinalStepRes.Player;
                await PlayerService.SavePlayerAsync();

                await ReloadPageAsync();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task LoginBtnAsync()
    {
        try
        {
            var loginReq = new LoginReq()
            {
                ProtocolId = ProtocolId.Login,
                Email = Email,
                Password = Password,
                LoginType = LoginType.Guest
            };
            var res = await HttpManager.SendHttpServerRequestAsync(loginReq);
            var loginRes = (LoginRes) res;

            if (loginRes.Result == Result.None)
            {
                PlayerService.Player = loginRes.Player;
                await PlayerService.SavePlayerAsync();
                CloseLoginPopup();
                await ReloadPageAsync();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task CreateDashBoardBtnAsync()
    {
        try
        {
            var createDashBoardReq = new CreateDashBoardReq()
            {
                ProtocolId = ProtocolId.CreateDashBoard,
                DashBoardName = createDashBoardName,
                Notification = createDashBoardNotification,
                Suid = PlayerService.Player.Suid
            };
            var res = await HttpManager.SendHttpServerRequestAsync(createDashBoardReq);
            var createDashBoardRes = (CreateDashBoardRes) res;
            
            if (createDashBoardRes.Result != Result.None)
                isDuplicatedDashBoardName = true;
            else
            {
                createableDashBoardCount--;
                isDuplicatedDashBoardName = false;
                successCreateDashBoard = true;
            }
        }
        catch (Exception e)
        {
            isDuplicatedDashBoardName = true;
        }
    }
}

@code 
{
    private string _title = "";
    private string _message = "Test Message";
    private bool _showProgressBar;
    private bool _showCloseButton;
    private bool _actionOnClick;
    private string _maximumOpacity;

    private string _showTransitionDuration;
    private string _visibleStateDuration;
    private string _hideTransitionDuration;

    private bool _requireInteraction;

    public string _maxDisplayedToasts
    {
        get { return Toaster.Configuration.MaxDisplayedToasts.ToString(); }
        set { Toaster.Configuration.MaxDisplayedToasts = Convert.ToInt32(value); }
    }

    private string _toastPosition
    {
        get { return Toaster.Configuration.Position.ToString(); }
        set { Toaster.Configuration.Position = (MatToastPosition)Enum.Parse(typeof(MatToastPosition), value); }
    }

    private void ShowDashBoardNotExist(MatToastType type, string message, string icon = "")
    {
        Toaster.Add(message, type, _title, icon, config =>
        {
            config.ShowCloseButton = _showCloseButton;
            config.ShowProgressBar = _showProgressBar;
            config.MaximumOpacity = Convert.ToInt32(_maximumOpacity);

            config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
            config.VisibleStateDuration = Convert.ToInt32(_visibleStateDuration);
            config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

            config.RequireInteraction = _requireInteraction;

            if (_actionOnClick)
            {
                config.Onclick = toast =>
                {
                    Console.WriteLine($"Title: \"{toast.Title}\"; message: \"{toast.Message}\"; Type: {toast.Options.Type}");
                    return Task.CompletedTask;
                };
            }
        });
    }

    private async Task ReloadPageAsync()
    {
        var tempPageUrl = "/temp";
        var currentPageUrl = Navigation.Uri;
        Navigation.NavigateTo(tempPageUrl);
        await Task.Delay(100);
        Navigation.NavigateTo(currentPageUrl, true);
    }
    
    private void ShowToast(MatToastType type, string message, string icon = "")
    {
        Toaster.Add(message, type, _title, icon, config =>
        {
            config.ShowCloseButton = _showCloseButton;
            config.ShowProgressBar = _showProgressBar;
            config.MaximumOpacity = Convert.ToInt32(_maximumOpacity);

            config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
            config.VisibleStateDuration = Convert.ToInt32(_visibleStateDuration);
            config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

            config.RequireInteraction = _requireInteraction;

            if (_actionOnClick)
            {
                config.Onclick = toast =>
                {
                    Console.WriteLine($"Title: \"{toast.Title}\"; message: \"{toast.Message}\"; Type: {toast.Options.Type}");
                    return Task.CompletedTask;
                };
            }
        });
    }
}
