@inject NavigationManager Navigation
@inject IMatToaster Toaster

<nav class="navbar navbar-expand-md navbar-dark bg-dark mb-4 custom-navbar">
    <div class="container-fluid">
        <a class="navbar-brand" href=""><span class="oi oi-home" aria-hidden="true"></span></a>
        <button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
            <form class="d-flex me-auto" role="search" @onsubmit="MoveToDashBoardPage">
                <input class="form-control me-2" type="search" placeholder="대시보드 검색" aria-label="Search" @bind="searchedDashBoardName">
                <button class="btn btn-outline-light" type="submit">Search</button>
            </form>
            <ul class="navbar-nav ms-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <button class="btn nav-link" @onclick="ShowDashboardCreatePopup">
                        <span class="oi oi-plus" aria-hidden="true"></span> 대시보드 생성
                    </button>
                </li>
                <li class="nav-item">
                    <button class="btn nav-link" @onclick="ShowPremiumShopPopup">
                        <span class="oi oi-star" aria-hidden="true"></span> PREMIUM
                    </button>
                </li>
                <li class="nav-item">
                    <button class="btn nav-link" @onclick="ShowLoginPopup">
                        <span class="oi oi-account-login" aria-hidden="true"></span> 로그인
                    </button>
                </li>
            </ul>
        </div>
    </div>
</nav>

@if (openDashBoardCreatePopUp)
{
    <div class="modal-backdrop show"></div> <!-- Semi-transparent background -->
    <div class="modal show d-block" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">대시보드 생성</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDashboardCreatePopup"></button>
                </div>
                <div class="modal-body">
                    <!-- Your form or content here -->
                    <p>Modal content goes here.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDashboardCreatePopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (openPremiumShopPopUp)
{
    <div class="modal-backdrop show"></div> <!-- Semi-transparent background -->
    <div class="modal show d-block" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">프리미엄 구매</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="ClosePremiumShopPopup"></button>
                </div>
                <div class="modal-body">
                    <!-- Your form or content here -->
                    <p>Modal content goes here.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClosePremiumShopPopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (openLoginPopUp)
{
    <div class="modal-backdrop show"></div> <!-- Semi-transparent background -->
    <div class="modal show d-block" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">로그인</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseLoginPopup"></button>
                </div>
                <div class="modal-body">
                    <!-- Your form or content here -->
                    <p>Modal content goes here.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseLoginPopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool collapseNavMenu = true;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;
    
    private bool openDashBoardCreatePopUp = false;
    private bool openLoginPopUp = false;
    private bool openPremiumShopPopUp = false;
    
    private string searchedDashBoardName = "";

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ShowDashboardCreatePopup()
    {
        openDashBoardCreatePopUp = true;
    }

    private void CloseDashboardCreatePopup()
    {
        openDashBoardCreatePopUp = false;
    }
    
    private void ShowLoginPopup()
    {
        openLoginPopUp = true;
    }

    private void CloseLoginPopup()
    {
        openLoginPopUp = false;
    }
    
    private void ShowPremiumShopPopup()
    {
        openPremiumShopPopUp = true;
    }

    private void ClosePremiumShopPopup()
    {
        openPremiumShopPopUp = false;
    }
    
    private void MoveToDashBoardPage()
    {
        try
        {
            Navigation.NavigateTo($"/");
            Navigation.NavigateTo($"/DashBoardPage/{searchedDashBoardName}");
        }
        catch (Exception)
        {
            ShowError(MatToastType.Warning, "잠시 후 다시 시도해주세요.");
        }
    }
}

@code 
{
    private string _title = "";
    private string _message = "Test Message";
    private bool _showProgressBar;
    private bool _showCloseButton;
    private bool _actionOnClick;
    private string _maximumOpacity;

    private string _showTransitionDuration;
    private string _visibleStateDuration;
    private string _hideTransitionDuration;

    private bool _requireInteraction;

    public string _maxDisplayedToasts
    {
        get { return Toaster.Configuration.MaxDisplayedToasts.ToString(); }
        set { Toaster.Configuration.MaxDisplayedToasts = Convert.ToInt32(value); }
    }

    private string _toastPosition
    {
        get { return Toaster.Configuration.Position.ToString(); }
        set { Toaster.Configuration.Position = (MatToastPosition)Enum.Parse(typeof(MatToastPosition), value); }
    }

    private void ShowDashBoardNotExist(MatToastType type, string message, string icon = "")
    {
        Toaster.Add(message, type, _title, icon, config =>
        {
            config.ShowCloseButton = _showCloseButton;
            config.ShowProgressBar = _showProgressBar;
            config.MaximumOpacity = Convert.ToInt32(_maximumOpacity);

            config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
            config.VisibleStateDuration = Convert.ToInt32(_visibleStateDuration);
            config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

            config.RequireInteraction = _requireInteraction;

            if (_actionOnClick)
            {
                config.Onclick = toast =>
                {
                    Console.WriteLine($"Title: \"{toast.Title}\"; message: \"{toast.Message}\"; Type: {toast.Options.Type}");
                    return Task.CompletedTask;
                };
            }
        });
    }
    
    private void ShowError(MatToastType type, string message, string icon = "")
    {
        Toaster.Add(message, type, _title, icon, config =>
        {
            config.ShowCloseButton = _showCloseButton;
            config.ShowProgressBar = _showProgressBar;
            config.MaximumOpacity = Convert.ToInt32(_maximumOpacity);

            config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
            config.VisibleStateDuration = Convert.ToInt32(_visibleStateDuration);
            config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

            config.RequireInteraction = _requireInteraction;

            if (_actionOnClick)
            {
                config.Onclick = toast =>
                {
                    Console.WriteLine($"Title: \"{toast.Title}\"; message: \"{toast.Message}\"; Type: {toast.Options.Type}");
                    return Task.CompletedTask;
                };
            }
        });
    }
}
